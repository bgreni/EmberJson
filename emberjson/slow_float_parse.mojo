from .parser_helper import (
    BytePtr,
    NEG,
    PLUS,
    ZERO_CHAR,
    isdigit,
    DOT,
    ptr_dist,
    is_exp_char,
    append_digit,
)
from .utils import select
from .utils import StackArray
from memory.unsafe import bitcast
from memory import UnsafePointer


alias MANTISSA_EXPLICIT_BITS = 52
alias MINIMUM_EXPONENT: Int32 = -1023
alias INFINITE_POWER = 0x7FF
alias SIGN_INDEX = 63
alias MAX_DIGITS = 768
alias DECIMAL_POINT_RANGE = 2047


@value
struct Decimal:
    var num_digits: UInt32
    var decimal_point: Int32
    var truncated: Bool
    var negative: Bool
    var digits: StackArray[Byte, MAX_DIGITS]

    fn round(self) -> UInt64:
        if self.num_digits == 0 or self.decimal_point < 0:
            return 0
        elif self.decimal_point > 18:
            return UInt64.MAX

        var dp = UInt32(self.decimal_point)
        var n: UInt64 = 0

        for i in range(dp):
            n = append_digit(n, select(i < self.num_digits, self.digits[i], 0))

        var round_up = False
        if dp < self.num_digits:
            round_up = self.digits.unsafe_get(dp) >= 5

            if self.digits.unsafe_get(dp) == 5 and dp + 1 == self.num_digits:
                round_up = self.truncated or ((dp > 0) and Bool(1 & self.digits.unsafe_get(dp - 1)))
        if round_up:
            n += 1
        return n

    fn __irshift__(mut self, shift: UInt64):
        var read_index = UInt32(0)
        var write_index = UInt32(0)

        var n = UInt64(0)

        while (n >> shift) == 0:
            if read_index < self.num_digits:
                n = append_digit(n, self.digits.unsafe_get(read_index))
                read_index += 1
            elif n == 0:
                return
            else:
                while (n >> shift) == 0:
                    n *= 10
                    read_index += 1
                break
        self.decimal_point -= (read_index - 1).cast[DType.int32]()
        if self.decimal_point < -DECIMAL_POINT_RANGE:
            self.num_digits = 0
            self.decimal_point = 0
            self.negative = False
            self.truncated = False
            return
        var mask: UInt64 = (UInt64(1) << shift) - 1
        while read_index < self.num_digits:
            var new_digit = (n >> shift).cast[DType.uint8]()
            n = append_digit(n & mask, self.digits.unsafe_get(read_index))
            read_index += 1
            self.digits.unsafe_get(write_index) = new_digit
            write_index += 1

        while n > 0:
            var new_digit = (n >> shift).cast[DType.uint8]()
            n = 10 * (n & mask)
            if write_index < MAX_DIGITS:
                self.digits.unsafe_get(write_index) = new_digit
                write_index += 1
            elif new_digit > 0:
                self.truncated = True
        self.num_digits = write_index
        self.trim()

    fn __ilshift__(mut self, shift: UInt64):
        if self.num_digits == 0:
            return
        var num_new_digits = self.number_of_digits_decimal_left_shift(shift)
        var read_index: Int32 = (self.num_digits - 1).cast[DType.int32]()
        var write_index: UInt32 = self.num_digits - 1 + num_new_digits
        var n: UInt64 = 0

        while read_index >= 0:
            n += self.digits.unsafe_get(read_index).cast[DType.uint64]() << shift
            var quotient = n / 10
            var remainder = n - (10 * quotient)
            if write_index < MAX_DIGITS:
                self.digits.unsafe_get(write_index) = UInt8(remainder)
            elif remainder > 0:
                self.truncated = True
            n = quotient
            write_index -= 1
            read_index -= 1
        while n > 0:
            var quotient = n / 10
            var remainder = n - (10 * quotient)
            if write_index < MAX_DIGITS:
                self.digits.unsafe_get(write_index) = UInt8(remainder)
            elif remainder > 0:
                self.truncated = True
            n = quotient
            write_index -= 1
        self.num_digits += num_new_digits
        if self.num_digits > MAX_DIGITS:
            self.num_digits = MAX_DIGITS
        self.decimal_point += Int32(num_new_digits)
        self.trim()

    fn trim(mut self):
        while self.num_digits > 0 and self.digits.unsafe_get(self.num_digits - 1) == 0:
            self.num_digits -= 1

    fn number_of_digits_decimal_left_shift(self, owned shift: UInt64) -> UInt32:
        shift &= 63

        var x_a = number_of_digits_decimal_left_shift_table.unsafe_get(shift).cast[DType.uint32]()
        var x_b = number_of_digits_decimal_left_shift_table.unsafe_get(shift + 1).cast[DType.uint32]()
        var num_new_digits: UInt32 = x_a >> 11
        var pow5_a = 0x7FF & x_a
        var pow5_b = 0x7FF & x_b

        # kinda cursed
        var pow5 = number_of_digits_decimal_left_shift_table_powers_of_5.unsafe_ptr().offset(pow5_a)
        for i in range(pow5_b - pow5_a):
            if i >= self.num_digits:
                return num_new_digits - 1
            elif self.digits.unsafe_get(i) == pow5[i]:
                continue
            elif self.digits.unsafe_get(i) < pow5[i]:
                return num_new_digits - 1
            else:
                break

        return num_new_digits


@value
@register_passable("trivial")
struct AdjustedMantissa:
    var mantissa: UInt64
    var power2: Int

    fn __init__(out self):
        self.mantissa = 0
        self.power2 = 0


fn from_chars_slow(out value: Float64, owned first: BytePtr) raises:
    var negative = first[] == NEG
    first += Int(negative or first[] == PLUS)
    var am = compute_float(parse_decimal(first))
    var word = am.mantissa
    word |= UInt64(am.power2) << MANTISSA_EXPLICIT_BITS
    word = select(negative, word | (UInt64(1) << SIGN_INDEX), word)

    value = bitcast[DType.float64](word)


fn compute_float(out answer: AdjustedMantissa, owned d: Decimal) raises:
    answer = AdjustedMantissa()

    if d.num_digits == 0 or d.decimal_point < -324:
        return

    if d.decimal_point >= 310:
        raise Error("Infinite float")

    alias MAX_SHIFT = 60
    alias NUM_POWERS = 19
    alias POWERS = StackArray[UInt8, NUM_POWERS](0, 3, 6, 9, 13, 16, 19, 23, 26, 29, 33, 36, 39, 43, 46, 49, 53, 56, 59)

    var exp2: Int32 = 0

    while d.decimal_point > 0:
        var n = d.decimal_point.cast[DType.uint32]()
        var shift: UInt64 = select(n < NUM_POWERS, POWERS.unsafe_get(n).cast[DType.uint64](), MAX_SHIFT)
        d >>= shift
        if d.decimal_point < -DECIMAL_POINT_RANGE:
            return
        exp2 += shift.cast[DType.int32]()

    while d.decimal_point <= 0:
        var shift: UInt64
        if d.decimal_point == 0:
            if d.digits.unsafe_get(0) >= 5:
                break
            shift = select(d.digits.unsafe_get(0) < 2, UInt64(2), UInt64(1))
        else:
            var n: UInt32 = UInt32(-d.decimal_point)
            shift = select(
                n < NUM_POWERS,
                POWERS.unsafe_get(n).cast[DType.uint64](),
                MAX_SHIFT,
            )

        d <<= shift

        if d.decimal_point > DECIMAL_POINT_RANGE:
            raise Error("Infinite float")

        exp2 -= Int32(shift)

    exp2 -= 1

    while MINIMUM_EXPONENT + 1 > exp2:
        var n = UInt64((MINIMUM_EXPONENT + 1) - exp2)
        if n > MAX_SHIFT:
            n = MAX_SHIFT
        d >>= n
        exp2 += Int32(n)

    if exp2 - MINIMUM_EXPONENT >= INFINITE_POWER:
        raise Error("Infinite float")

    alias mantissa_size_in_bits = MANTISSA_EXPLICIT_BITS + 1
    d <<= mantissa_size_in_bits

    var mantissa: UInt64 = d.round()

    if mantissa >= (UInt64(1) << mantissa_size_in_bits):
        d >>= 1
        exp2 += 1
        mantissa = d.round()
        if exp2 - MINIMUM_EXPONENT >= INFINITE_POWER:
            raise Error("Infinite float")

    answer.power2 = Int(exp2 - MINIMUM_EXPONENT)
    if mantissa < (UInt64(1) << MANTISSA_EXPLICIT_BITS):
        answer.power2 -= 1

    answer.mantissa = mantissa & ((UInt64(1) << MANTISSA_EXPLICIT_BITS) - 1)


fn parse_decimal(out answer: Decimal, mut p: BytePtr):
    answer = Decimal(0, 0, False, p[] == NEG, StackArray[Byte, MAX_DIGITS](0))

    @parameter
    @always_inline
    fn consume_digits():
        while isdigit(p[]):
            if answer.num_digits < MAX_DIGITS:
                answer.digits[answer.num_digits] = p[] - ZERO_CHAR
            answer.num_digits += 1
            p += 1

    if answer.negative or p[] == PLUS:
        p += 1

    while p[] == ZERO_CHAR:
        p += 1

    consume_digits()

    if p[] == DOT:
        p += 1
        var first_after_period = p
        if answer.num_digits == 0:
            while p[] == ZERO_CHAR:
                p += 1
        consume_digits()
        answer.decimal_point = ptr_dist(p, first_after_period)

    if answer.num_digits > 0:
        var preverse = p - 1
        var trailing_zeros = Int32(0)
        while preverse[] == ZERO_CHAR or preverse[] == DOT:
            if preverse[] == ZERO_CHAR:
                trailing_zeros += 1
            preverse -= 1
        answer.decimal_point += answer.num_digits.cast[DType.int32]()
        answer.num_digits -= trailing_zeros.cast[DType.uint32]()

    if answer.num_digits > MAX_DIGITS:
        answer.num_digits = MAX_DIGITS
        answer.truncated = True

    if is_exp_char(p[]):
        p += 1
        var neg_exp = p[] == NEG
        if neg_exp or p[] == PLUS:
            p += 1
        var exp_number: Int32 = 0
        while isdigit(p[]):
            if exp_number < 0x10000:
                exp_number = append_digit(exp_number, p[] - ZERO_CHAR)
            p += 1
        answer.decimal_point += select(neg_exp, -exp_number, exp_number)


var number_of_digits_decimal_left_shift_table = StackArray[UInt16, 65](
    0x0000,
    0x0800,
    0x0801,
    0x0803,
    0x1006,
    0x1009,
    0x100D,
    0x1812,
    0x1817,
    0x181D,
    0x2024,
    0x202B,
    0x2033,
    0x203C,
    0x2846,
    0x2850,
    0x285B,
    0x3067,
    0x3073,
    0x3080,
    0x388E,
    0x389C,
    0x38AB,
    0x38BB,
    0x40CC,
    0x40DD,
    0x40EF,
    0x4902,
    0x4915,
    0x4929,
    0x513E,
    0x5153,
    0x5169,
    0x5180,
    0x5998,
    0x59B0,
    0x59C9,
    0x61E3,
    0x61FD,
    0x6218,
    0x6A34,
    0x6A50,
    0x6A6D,
    0x6A8B,
    0x72AA,
    0x72C9,
    0x72E9,
    0x7B0A,
    0x7B2B,
    0x7B4D,
    0x8370,
    0x8393,
    0x83B7,
    0x83DC,
    0x8C02,
    0x8C28,
    0x8C4F,
    0x9477,
    0x949F,
    0x94C8,
    0x9CF2,
    0x051C,
    0x051C,
    0x051C,
    0x051C,
)

var number_of_digits_decimal_left_shift_table_powers_of_5 = StackArray[UInt8, 0x051C](
    5,
    2,
    5,
    1,
    2,
    5,
    6,
    2,
    5,
    3,
    1,
    2,
    5,
    1,
    5,
    6,
    2,
    5,
    7,
    8,
    1,
    2,
    5,
    3,
    9,
    0,
    6,
    2,
    5,
    1,
    9,
    5,
    3,
    1,
    2,
    5,
    9,
    7,
    6,
    5,
    6,
    2,
    5,
    4,
    8,
    8,
    2,
    8,
    1,
    2,
    5,
    2,
    4,
    4,
    1,
    4,
    0,
    6,
    2,
    5,
    1,
    2,
    2,
    0,
    7,
    0,
    3,
    1,
    2,
    5,
    6,
    1,
    0,
    3,
    5,
    1,
    5,
    6,
    2,
    5,
    3,
    0,
    5,
    1,
    7,
    5,
    7,
    8,
    1,
    2,
    5,
    1,
    5,
    2,
    5,
    8,
    7,
    8,
    9,
    0,
    6,
    2,
    5,
    7,
    6,
    2,
    9,
    3,
    9,
    4,
    5,
    3,
    1,
    2,
    5,
    3,
    8,
    1,
    4,
    6,
    9,
    7,
    2,
    6,
    5,
    6,
    2,
    5,
    1,
    9,
    0,
    7,
    3,
    4,
    8,
    6,
    3,
    2,
    8,
    1,
    2,
    5,
    9,
    5,
    3,
    6,
    7,
    4,
    3,
    1,
    6,
    4,
    0,
    6,
    2,
    5,
    4,
    7,
    6,
    8,
    3,
    7,
    1,
    5,
    8,
    2,
    0,
    3,
    1,
    2,
    5,
    2,
    3,
    8,
    4,
    1,
    8,
    5,
    7,
    9,
    1,
    0,
    1,
    5,
    6,
    2,
    5,
    1,
    1,
    9,
    2,
    0,
    9,
    2,
    8,
    9,
    5,
    5,
    0,
    7,
    8,
    1,
    2,
    5,
    5,
    9,
    6,
    0,
    4,
    6,
    4,
    4,
    7,
    7,
    5,
    3,
    9,
    0,
    6,
    2,
    5,
    2,
    9,
    8,
    0,
    2,
    3,
    2,
    2,
    3,
    8,
    7,
    6,
    9,
    5,
    3,
    1,
    2,
    5,
    1,
    4,
    9,
    0,
    1,
    1,
    6,
    1,
    1,
    9,
    3,
    8,
    4,
    7,
    6,
    5,
    6,
    2,
    5,
    7,
    4,
    5,
    0,
    5,
    8,
    0,
    5,
    9,
    6,
    9,
    2,
    3,
    8,
    2,
    8,
    1,
    2,
    5,
    3,
    7,
    2,
    5,
    2,
    9,
    0,
    2,
    9,
    8,
    4,
    6,
    1,
    9,
    1,
    4,
    0,
    6,
    2,
    5,
    1,
    8,
    6,
    2,
    6,
    4,
    5,
    1,
    4,
    9,
    2,
    3,
    0,
    9,
    5,
    7,
    0,
    3,
    1,
    2,
    5,
    9,
    3,
    1,
    3,
    2,
    2,
    5,
    7,
    4,
    6,
    1,
    5,
    4,
    7,
    8,
    5,
    1,
    5,
    6,
    2,
    5,
    4,
    6,
    5,
    6,
    6,
    1,
    2,
    8,
    7,
    3,
    0,
    7,
    7,
    3,
    9,
    2,
    5,
    7,
    8,
    1,
    2,
    5,
    2,
    3,
    2,
    8,
    3,
    0,
    6,
    4,
    3,
    6,
    5,
    3,
    8,
    6,
    9,
    6,
    2,
    8,
    9,
    0,
    6,
    2,
    5,
    1,
    1,
    6,
    4,
    1,
    5,
    3,
    2,
    1,
    8,
    2,
    6,
    9,
    3,
    4,
    8,
    1,
    4,
    4,
    5,
    3,
    1,
    2,
    5,
    5,
    8,
    2,
    0,
    7,
    6,
    6,
    0,
    9,
    1,
    3,
    4,
    6,
    7,
    4,
    0,
    7,
    2,
    2,
    6,
    5,
    6,
    2,
    5,
    2,
    9,
    1,
    0,
    3,
    8,
    3,
    0,
    4,
    5,
    6,
    7,
    3,
    3,
    7,
    0,
    3,
    6,
    1,
    3,
    2,
    8,
    1,
    2,
    5,
    1,
    4,
    5,
    5,
    1,
    9,
    1,
    5,
    2,
    2,
    8,
    3,
    6,
    6,
    8,
    5,
    1,
    8,
    0,
    6,
    6,
    4,
    0,
    6,
    2,
    5,
    7,
    2,
    7,
    5,
    9,
    5,
    7,
    6,
    1,
    4,
    1,
    8,
    3,
    4,
    2,
    5,
    9,
    0,
    3,
    3,
    2,
    0,
    3,
    1,
    2,
    5,
    3,
    6,
    3,
    7,
    9,
    7,
    8,
    8,
    0,
    7,
    0,
    9,
    1,
    7,
    1,
    2,
    9,
    5,
    1,
    6,
    6,
    0,
    1,
    5,
    6,
    2,
    5,
    1,
    8,
    1,
    8,
    9,
    8,
    9,
    4,
    0,
    3,
    5,
    4,
    5,
    8,
    5,
    6,
    4,
    7,
    5,
    8,
    3,
    0,
    0,
    7,
    8,
    1,
    2,
    5,
    9,
    0,
    9,
    4,
    9,
    4,
    7,
    0,
    1,
    7,
    7,
    2,
    9,
    2,
    8,
    2,
    3,
    7,
    9,
    1,
    5,
    0,
    3,
    9,
    0,
    6,
    2,
    5,
    4,
    5,
    4,
    7,
    4,
    7,
    3,
    5,
    0,
    8,
    8,
    6,
    4,
    6,
    4,
    1,
    1,
    8,
    9,
    5,
    7,
    5,
    1,
    9,
    5,
    3,
    1,
    2,
    5,
    2,
    2,
    7,
    3,
    7,
    3,
    6,
    7,
    5,
    4,
    4,
    3,
    2,
    3,
    2,
    0,
    5,
    9,
    4,
    7,
    8,
    7,
    5,
    9,
    7,
    6,
    5,
    6,
    2,
    5,
    1,
    1,
    3,
    6,
    8,
    6,
    8,
    3,
    7,
    7,
    2,
    1,
    6,
    1,
    6,
    0,
    2,
    9,
    7,
    3,
    9,
    3,
    7,
    9,
    8,
    8,
    2,
    8,
    1,
    2,
    5,
    5,
    6,
    8,
    4,
    3,
    4,
    1,
    8,
    8,
    6,
    0,
    8,
    0,
    8,
    0,
    1,
    4,
    8,
    6,
    9,
    6,
    8,
    9,
    9,
    4,
    1,
    4,
    0,
    6,
    2,
    5,
    2,
    8,
    4,
    2,
    1,
    7,
    0,
    9,
    4,
    3,
    0,
    4,
    0,
    4,
    0,
    0,
    7,
    4,
    3,
    4,
    8,
    4,
    4,
    9,
    7,
    0,
    7,
    0,
    3,
    1,
    2,
    5,
    1,
    4,
    2,
    1,
    0,
    8,
    5,
    4,
    7,
    1,
    5,
    2,
    0,
    2,
    0,
    0,
    3,
    7,
    1,
    7,
    4,
    2,
    2,
    4,
    8,
    5,
    3,
    5,
    1,
    5,
    6,
    2,
    5,
    7,
    1,
    0,
    5,
    4,
    2,
    7,
    3,
    5,
    7,
    6,
    0,
    1,
    0,
    0,
    1,
    8,
    5,
    8,
    7,
    1,
    1,
    2,
    4,
    2,
    6,
    7,
    5,
    7,
    8,
    1,
    2,
    5,
    3,
    5,
    5,
    2,
    7,
    1,
    3,
    6,
    7,
    8,
    8,
    0,
    0,
    5,
    0,
    0,
    9,
    2,
    9,
    3,
    5,
    5,
    6,
    2,
    1,
    3,
    3,
    7,
    8,
    9,
    0,
    6,
    2,
    5,
    1,
    7,
    7,
    6,
    3,
    5,
    6,
    8,
    3,
    9,
    4,
    0,
    0,
    2,
    5,
    0,
    4,
    6,
    4,
    6,
    7,
    7,
    8,
    1,
    0,
    6,
    6,
    8,
    9,
    4,
    5,
    3,
    1,
    2,
    5,
    8,
    8,
    8,
    1,
    7,
    8,
    4,
    1,
    9,
    7,
    0,
    0,
    1,
    2,
    5,
    2,
    3,
    2,
    3,
    3,
    8,
    9,
    0,
    5,
    3,
    3,
    4,
    4,
    7,
    2,
    6,
    5,
    6,
    2,
    5,
    4,
    4,
    4,
    0,
    8,
    9,
    2,
    0,
    9,
    8,
    5,
    0,
    0,
    6,
    2,
    6,
    1,
    6,
    1,
    6,
    9,
    4,
    5,
    2,
    6,
    6,
    7,
    2,
    3,
    6,
    3,
    2,
    8,
    1,
    2,
    5,
    2,
    2,
    2,
    0,
    4,
    4,
    6,
    0,
    4,
    9,
    2,
    5,
    0,
    3,
    1,
    3,
    0,
    8,
    0,
    8,
    4,
    7,
    2,
    6,
    3,
    3,
    3,
    6,
    1,
    8,
    1,
    6,
    4,
    0,
    6,
    2,
    5,
    1,
    1,
    1,
    0,
    2,
    2,
    3,
    0,
    2,
    4,
    6,
    2,
    5,
    1,
    5,
    6,
    5,
    4,
    0,
    4,
    2,
    3,
    6,
    3,
    1,
    6,
    6,
    8,
    0,
    9,
    0,
    8,
    2,
    0,
    3,
    1,
    2,
    5,
    5,
    5,
    5,
    1,
    1,
    1,
    5,
    1,
    2,
    3,
    1,
    2,
    5,
    7,
    8,
    2,
    7,
    0,
    2,
    1,
    1,
    8,
    1,
    5,
    8,
    3,
    4,
    0,
    4,
    5,
    4,
    1,
    0,
    1,
    5,
    6,
    2,
    5,
    2,
    7,
    7,
    5,
    5,
    5,
    7,
    5,
    6,
    1,
    5,
    6,
    2,
    8,
    9,
    1,
    3,
    5,
    1,
    0,
    5,
    9,
    0,
    7,
    9,
    1,
    7,
    0,
    2,
    2,
    7,
    0,
    5,
    0,
    7,
    8,
    1,
    2,
    5,
    1,
    3,
    8,
    7,
    7,
    7,
    8,
    7,
    8,
    0,
    7,
    8,
    1,
    4,
    4,
    5,
    6,
    7,
    5,
    5,
    2,
    9,
    5,
    3,
    9,
    5,
    8,
    5,
    1,
    1,
    3,
    5,
    2,
    5,
    3,
    9,
    0,
    6,
    2,
    5,
    6,
    9,
    3,
    8,
    8,
    9,
    3,
    9,
    0,
    3,
    9,
    0,
    7,
    2,
    2,
    8,
    3,
    7,
    7,
    6,
    4,
    7,
    6,
    9,
    7,
    9,
    2,
    5,
    5,
    6,
    7,
    6,
    2,
    6,
    9,
    5,
    3,
    1,
    2,
    5,
    3,
    4,
    6,
    9,
    4,
    4,
    6,
    9,
    5,
    1,
    9,
    5,
    3,
    6,
    1,
    4,
    1,
    8,
    8,
    8,
    2,
    3,
    8,
    4,
    8,
    9,
    6,
    2,
    7,
    8,
    3,
    8,
    1,
    3,
    4,
    7,
    6,
    5,
    6,
    2,
    5,
    1,
    7,
    3,
    4,
    7,
    2,
    3,
    4,
    7,
    5,
    9,
    7,
    6,
    8,
    0,
    7,
    0,
    9,
    4,
    4,
    1,
    1,
    9,
    2,
    4,
    4,
    8,
    1,
    3,
    9,
    1,
    9,
    0,
    6,
    7,
    3,
    8,
    2,
    8,
    1,
    2,
    5,
    8,
    6,
    7,
    3,
    6,
    1,
    7,
    3,
    7,
    9,
    8,
    8,
    4,
    0,
    3,
    5,
    4,
    7,
    2,
    0,
    5,
    9,
    6,
    2,
    2,
    4,
    0,
    6,
    9,
    5,
    9,
    5,
    3,
    3,
    6,
    9,
    1,
    4,
    0,
    6,
    2,
    5,
)
